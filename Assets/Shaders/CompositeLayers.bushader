#vertex
#include "ScreenPass.vert"

#fragment
const int EFFECT_LAYER_TYPE_DIRT = 0;
const int EFFECT_LAYER_TYPE_NORMAL_LINES = 1;
const int EFFECT_LAYER_TYPE_FRACTAL_BUMPS = 2;
const int EFFECT_LAYER_TYPE_WAVE_BUMPS = 3;
const int EFFECT_LAYER_TYPE_AMBIENT_OCCLUSION = 4;

uniform sampler2D EffectLayerTexture;
uniform sampler2D EffectLayerMaskTexture;
uniform int EffectLayerType;

uniform sampler2D PreviousAlbedoTexture;
uniform sampler2D PreviousNormalTexture;
uniform sampler2D PreviousHeightTexture;
uniform sampler2D PreviousRoughnessTexture;
uniform sampler2D PreviousMetalnessTexture;

in vec2 B_FIn_AlbedoUv;

layout(location = 0) out vec4 OutAlbedo;
layout(location = 1) out vec4 OutNormal;
layout(location = 2) out vec4 OutHeight;
layout(location = 3) out vec4 OutRoughness;
layout(location = 4) out vec4 OutMetalness;

void main()
{
    vec2 uv = B_FIn_AlbedoUv;

    // Apply effect layer
    float mask = texture(EffectLayerMaskTexture, uv).r;
    vec4  previousAlbedo    = texture(PreviousAlbedoTexture, uv);
    vec3  previousNormal    = texture(PreviousNormalTexture, uv).rgb;
    float previousHeight    = texture(PreviousHeightTexture, uv).r;
    float previousRoughness = texture(PreviousRoughnessTexture, uv).r;
    float previousMetalness = texture(PreviousMetalnessTexture, uv).r;

    vec4 outAlbedo = previousAlbedo;
    vec3 outNormal = previousNormal;
    float outHeight = previousHeight;
    float outRoughness = previousRoughness;
    float outMetalness = previousMetalness;

    if (mask < 1)
    {
        vec4 effectLayerColor = texture2D(EffectLayerTexture, uv);
        effectLayerColor *= (1.0 - mask);
        switch (EffectLayerType)
        {
            case EFFECT_LAYER_TYPE_DIRT:
            {
                float dirtIntensity = effectLayerColor.a;

                outAlbedo.rgb = (effectLayerColor.rgb * dirtIntensity +
                                 previousAlbedo.rgb * (1-dirtIntensity));

                outRoughness = clamp(previousRoughness + dirtIntensity, 0, 1);
                outMetalness = clamp(previousMetalness - dirtIntensity, 0, 1);
            }
            break;

            case EFFECT_LAYER_TYPE_AMBIENT_OCCLUSION:
            {
                float ambientOcclusion = effectLayerColor.r;
                outAlbedo.rgb *= ambientOcclusion;
                // outAlbedo.rgb = effectLayerColor.rgb;
            }
            break;

            case EFFECT_LAYER_TYPE_NORMAL_LINES:
            case EFFECT_LAYER_TYPE_FRACTAL_BUMPS:
            case EFFECT_LAYER_TYPE_WAVE_BUMPS:
            {
                outHeight = previousHeight + effectLayerColor.r;
            }
            break;
        }
    }

    OutAlbedo    = vec4(outAlbedo);
    OutNormal    = vec4(outNormal, 1);
    OutHeight    = vec4(outHeight);
    OutRoughness = vec4(outRoughness);
    OutMetalness = vec4(outMetalness);
}

