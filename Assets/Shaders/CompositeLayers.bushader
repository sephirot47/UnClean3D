#vertex
#include "ScreenPass.vert"

#fragment

const int BLEND_MODE_ADD = 0;
const int BLEND_MODE_SUBTRACT = 1;
const int BLEND_MODE_MULTIPLY = 2;

uniform sampler2D EffectLayerColorTexture;
uniform sampler2D EffectLayerMiscTexture;

uniform sampler2D PreviousAlbedoTexture;
uniform sampler2D PreviousNormalTexture;
uniform sampler2D PreviousHeightTexture;
uniform sampler2D PreviousRoughnessTexture;
uniform sampler2D PreviousMetalnessTexture;
uniform int BlendMode;

in vec2 B_FIn_AlbedoUv;

layout(location = 0) out vec4 OutAlbedo;
layout(location = 1) out vec4 OutNormal;
layout(location = 2) out vec4 OutHeight;
layout(location = 3) out vec4 OutRoughness;
layout(location = 4) out vec4 OutMetalness;

void main()
{
    vec2 uv = B_FIn_AlbedoUv;

    // Apply effect layer
    vec4  previousAlbedo    = texture(PreviousAlbedoTexture, uv);
    vec3  previousNormal    = texture(PreviousNormalTexture, uv).rgb;
    float previousHeight    = texture(PreviousHeightTexture, uv).r;
    float previousRoughness = texture(PreviousRoughnessTexture, uv).r;
    float previousMetalness = texture(PreviousMetalnessTexture, uv).r;

    vec4 outAlbedo = previousAlbedo;
    vec3 outNormal = previousNormal;
    float outHeight = previousHeight;
    float outRoughness = previousRoughness;
    float outMetalness = previousMetalness;

    vec4 effectLayerColor      = texture2D(EffectLayerColorTexture, uv);
    vec4 effectLayerMisc       = texture2D(EffectLayerMiscTexture, uv);
    float effectLayerHeight    = effectLayerMisc.r;
    float effectLayerRoughness = effectLayerMisc.g;
    float effectLayerMetalness = effectLayerMisc.b;
    switch (BlendMode)
    {
        case BLEND_MODE_ADD:
            outAlbedo.rgb += effectLayerColor.rgb;
            outHeight     += effectLayerHeight;
            outRoughness  += effectLayerRoughness;
            outMetalness  += effectLayerMetalness;
        break;

        case BLEND_MODE_SUBTRACT:
            outAlbedo.rgb -= effectLayerColor.rgb;
            outHeight     -= effectLayerHeight;
            outRoughness  -= effectLayerRoughness;
            outMetalness  -= effectLayerMetalness;
        break;

        case BLEND_MODE_MULTIPLY:
            outAlbedo.rgb *= effectLayerColor.rgb;
            outHeight     *= effectLayerHeight;
            outRoughness  *= effectLayerRoughness;
            outMetalness  *= effectLayerMetalness;
        break;
    }

    OutAlbedo    = vec4(outAlbedo);
    OutNormal    = vec4(outNormal, 1);
    OutHeight    = vec4(outHeight);
    OutRoughness = vec4(outRoughness);
    OutMetalness = vec4(outMetalness);
}

