#vertex
#include "ScreenPass.vert"

#fragment
const int EFFECT_LAYER_TYPE_DIRT = 0;

uniform sampler2D EffectLayerTexture;
uniform int EffectLayerType;

uniform sampler2D OriginalAlbedoTexture;
uniform sampler2D PreviousAlbedoTexture;
uniform sampler2D OriginalNormalTexture;
uniform sampler2D PreviousNormalTexture;
uniform sampler2D OriginalRoughnessTexture;
uniform sampler2D PreviousRoughnessTexture;
uniform sampler2D OriginalMetalnessTexture;
uniform sampler2D PreviousMetalnessTexture;

in vec2 B_FIn_AlbedoUv;

layout(location = 0) out vec4 OutAlbedo;
layout(location = 1) out vec4 OutNormal;
layout(location = 2) out vec4 OutRoughness;
layout(location = 3) out vec4 OutMetalness;

void main()
{
    vec2 uv = B_FIn_AlbedoUv;

    // Apply effect layer
    vec4 effectLayerColor = texture2D(EffectLayerTexture, uv);
    switch (EffectLayerType)
    {
        case EFFECT_LAYER_TYPE_DIRT:
        {
            vec4 originalAlbedo    = texture(OriginalAlbedoTexture, uv);
            vec4 originalNormal    = texture(OriginalNormalTexture, uv);
            vec4 originalRoughness = texture(OriginalRoughnessTexture, uv);
            vec4 originalMetalness = texture(OriginalMetalnessTexture, uv);
            vec3 previousAlbedo = texture(PreviousAlbedoTexture, uv).rgb;

            float alpha = effectLayerColor.a;
            float dirtIntensity = effectLayerColor.a;

            OutAlbedo.rgb = (effectLayerColor.rgb * alpha +
                             previousAlbedo.rgb * (1-alpha));
            OutAlbedo.a   = originalAlbedo.a;

            OutNormal    = originalNormal;
            OutRoughness = clamp(originalRoughness + (alpha), vec4(0), vec4(1));
            OutMetalness = clamp(originalMetalness - (alpha), vec4(0), vec4(1));
        }
        break;
    }
}

