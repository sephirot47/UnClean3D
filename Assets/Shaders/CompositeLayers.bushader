#vertex
#include "ScreenPass.vert"

#fragment

const int BLEND_MODE_IGNORE = 0;
const int BLEND_MODE_ADD = 1;
const int BLEND_MODE_SUBTRACT = 2;
const int BLEND_MODE_MULTIPLY = 3;

uniform sampler2D EffectLayerMaskTexture;
uniform sampler2D EffectLayerColorTexture;
uniform sampler2D EffectLayerMiscTexture;

uniform sampler2D PreviousAlbedoTexture;
uniform sampler2D PreviousHeightTexture;
uniform sampler2D PreviousRoughnessTexture;
uniform sampler2D PreviousMetalnessTexture;
uniform int ColorBlendMode;
uniform int HeightBlendMode;
uniform int RoughnessBlendMode;
uniform int MetalnessBlendMode;

in vec2 B_FIn_AlbedoUv;

layout(location = 0) out vec4 OutAlbedo;
layout(location = 1) out vec4 OutHeight;
layout(location = 2) out vec4 OutRoughness;
layout(location = 3) out vec4 OutMetalness;

vec4 Blend(in int blendMode,
           in vec4 oldValue,
           in vec4 value,
           in bool forColor,
           in float alpha)
{
    vec4 newValue = oldValue;

    if (forColor)
    {
        float alphaImportance = 5.0f;
        alpha *= alphaImportance;
        alpha = clamp(alpha, 0, 1);
    }

    switch (blendMode)
    {
        case BLEND_MODE_ADD:
            if (forColor)
            {
                newValue = oldValue * (1 - alpha) + value * alpha;
            }
            else
            {
                newValue = oldValue + value;
            }
        break;

        case BLEND_MODE_SUBTRACT:
            if (forColor)
            {
                newValue = oldValue * (1 - alpha) - value * alpha;
            }
            else
            {
                newValue = oldValue - value;
            }
        break;

        case BLEND_MODE_MULTIPLY:
            if (forColor)
            {
                newValue = oldValue * (1 - alpha) + oldValue * value * alpha;
            }
            else
            {
                newValue = oldValue * value;
            }
        break;
    }
    return newValue;
}

void main()
{
    vec2 uv = B_FIn_AlbedoUv;

    // Apply effect layer
    vec4  previousAlbedo    = texture(PreviousAlbedoTexture, uv);
    float previousHeight    = texture(PreviousHeightTexture, uv).r * 2 - 1;
    float previousRoughness = texture(PreviousRoughnessTexture, uv).r;
    float previousMetalness = texture(PreviousMetalnessTexture, uv).r;

    vec4 outAlbedo = previousAlbedo;
    float outHeight = previousHeight;
    float outRoughness = previousRoughness;
    float outMetalness = previousMetalness;

    float effectLayerMask      = texture2D(EffectLayerMaskTexture, uv).r;
    vec4 effectLayerColor      = texture2D(EffectLayerColorTexture, uv);
    vec4 effectLayerMisc       = texture2D(EffectLayerMiscTexture, uv);
    float effectLayerHeight    = effectLayerMisc.r * 2 - 1;
    float effectLayerRoughness = effectLayerMisc.g;
    float effectLayerMetalness = effectLayerMisc.b;

    if (effectLayerMask > 0)
    {
        outAlbedo = Blend(ColorBlendMode, previousAlbedo,
                          effectLayerColor, true, effectLayerColor.a);
        outAlbedo.a = 1;

        outHeight = Blend(HeightBlendMode, vec4(previousHeight),
                           vec4(effectLayerHeight), false, 1).r;
        outRoughness = Blend(RoughnessBlendMode, vec4(previousRoughness),
                             vec4(effectLayerRoughness), false, 1).r;
        outMetalness = Blend(MetalnessBlendMode, vec4(previousMetalness),
                             vec4(effectLayerMetalness), false, 1).r;
    }

    OutAlbedo    = vec4(outAlbedo);
    OutHeight    = vec4(outHeight * 0.5 + 0.5);
    OutRoughness = vec4(outRoughness);
    OutMetalness = vec4(outMetalness);
}

