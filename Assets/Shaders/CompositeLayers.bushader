#vertex
#include "ScreenPass.vert"

#fragment
const int EFFECT_LAYER_TYPE_DIRT = 0;

uniform sampler2D EffectLayerTexture;
uniform sampler2D EffectLayerMaskTexture;
uniform int EffectLayerType;

uniform sampler2D OriginalAlbedoTexture;
uniform sampler2D PreviousAlbedoTexture;
uniform sampler2D OriginalNormalTexture;
uniform sampler2D PreviousNormalTexture;
uniform sampler2D OriginalRoughnessTexture;
uniform sampler2D PreviousRoughnessTexture;
uniform sampler2D OriginalMetalnessTexture;
uniform sampler2D PreviousMetalnessTexture;

in vec2 B_FIn_AlbedoUv;

layout(location = 0) out vec4 OutAlbedo;
layout(location = 1) out vec4 OutNormal;
layout(location = 2) out vec4 OutRoughness;
layout(location = 3) out vec4 OutMetalness;

void main()
{
    vec2 uv = B_FIn_AlbedoUv;

    // Apply effect layer
    float mask = texture(EffectLayerMaskTexture, uv).r;
    vec4 originalAlbedo    = texture(OriginalAlbedoTexture, uv);
    vec4 originalNormal    = texture(OriginalNormalTexture, uv);
    vec4 originalRoughness = texture(OriginalRoughnessTexture, uv);
    vec4 originalMetalness = texture(OriginalMetalnessTexture, uv);
    if (mask < 1)
    {
        vec4 effectLayerColor = texture2D(EffectLayerTexture, uv);
        effectLayerColor *= (1.0 - mask);
        switch (EffectLayerType)
        {
            case EFFECT_LAYER_TYPE_DIRT:
            {
                vec3 previousAlbedo = texture(PreviousAlbedoTexture, uv).rgb;
                float dirtIntensity = effectLayerColor.a;

                OutAlbedo.rgb = (effectLayerColor.rgb * dirtIntensity +
                                 previousAlbedo.rgb * (1-dirtIntensity));
                OutAlbedo.a   = originalAlbedo.a;

                OutNormal    = originalNormal;
                OutRoughness = clamp(originalRoughness + dirtIntensity, vec4(0), vec4(1));
                OutMetalness = clamp(originalMetalness - dirtIntensity, vec4(0), vec4(1));
            }
            break;
        }
    }
    else
    {
        vec4 previousAlbedo    = texture(PreviousAlbedoTexture, uv);
        vec4 previousNormal    = texture(PreviousNormalTexture, uv);
        vec4 previousRoughness = texture(PreviousRoughnessTexture, uv);
        vec4 previousMetalness = texture(PreviousMetalnessTexture, uv);
        OutAlbedo    = previousAlbedo;
        OutNormal    = previousNormal;
        OutRoughness = previousRoughness;
        OutMetalness = previousMetalness;
    }
}

