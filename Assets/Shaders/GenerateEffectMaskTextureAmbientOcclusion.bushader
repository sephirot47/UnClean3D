#vertex

uniform mat4 SceneModelMatrix;

layout(location = 0) in vec3 vinTexturePosition;
layout(location = 1) in vec3 vinPosition;
layout(location = 2) in vec3 vinNormal;

out vec3 inWorldPosition;
out vec3 inWorldNormal;

void main()
{
    inWorldPosition = (SceneModelMatrix * vec4(vinPosition, 1)).xyz;
    inWorldNormal = (SceneModelMatrix * vec4(vinNormal, 0)).xyz;
    gl_Position = vec4(vinTexturePosition, 1);
}

// ===============================================================

#fragment
#define BANG_FRAGMENT

uniform mat4 SceneModelMatrix;
uniform int NumTriangles;
uniform sampler2D TrianglePositions;

in vec3 inWorldPosition;
in vec3 inWorldNormal;

layout(location = 0) out vec4 OutColor;

bool IntersectRayTriangle(vec3 rayOrig,
                          vec3 rayDir,
                          vec3 triP0,
                          vec3 triP1,
                          vec3 triP2,
                          float maxDist)
{
    vec3 v10 = (triP1 - triP0);
    vec3 v20 = (triP2 - triP0);

    vec3 h = cross(rayDir, v20);
    float a = dot(v10, h);

    float Epsilon = 1e-8;
    if (a > -Epsilon && a < Epsilon) { return false; }

    float f = 1.0 / a;
    vec3 s = (rayOrig - triP0);
    float u = f * dot(s, h);
    if (u < 0.0 || u > 1.0) { return false; }

    vec3 q = cross(s, v10);
    float v = f * dot(rayDir, q);
    if (v < 0.0 || u + v > 1.0) { return false; }

    float t = (f * dot(v20, q));
    if (t > maxDist || t < Epsilon) { return false; }

    return true;
}

vec4 GetTriangleData(int triId,
                     int vertexId,
                     ivec2 textureSize,
                     vec2 texelSize,
                     sampler2D Texture)
{
    int coord = triId * 3 + vertexId;
    ivec2 texelPos = ivec2(coord % textureSize.x,
                           coord / textureSize.x);
    vec2 uvs = texelPos * texelSize;
    return texture(Texture, uvs, 0).xyzw;
}

void GetTriangle(int triId,
                 ivec2 posTextureSize,
                 vec2 posTexelSize,
                 inout vec3 triPoints[3])
{
    for (int i = 0; i < 3; ++i)
    {
        triPoints[i] = GetTriangleData(triId, i,
                                       posTextureSize, posTexelSize,
                                       TrianglePositions).xyz;
    }
}

float rand(vec3 co)
{
    return fract(sin(dot(co.xyz, vec3(12.9898, 78.233, 32.123))) * 43758.5453);
}
vec3 rand3(vec3 co)
{
    return vec3(rand(co.xyz), rand(co.yxz), rand(co.zyx));
}

void main()
{
    vec3 worldPosition = inWorldPosition;
    vec3 worldNormal = normalize(inWorldNormal);

    ivec2 posTextureSize = textureSize(TrianglePositions, 0);
    vec2 posTexelSize = (1.0 / posTextureSize);

    float totalRays = 8;
    float intersectedRays = 0;
    for (int iRay = 0; iRay < totalRays; ++iRay)
    {
        for (int triId = 0; triId < NumTriangles; ++triId)
        {
            vec3 triPoints[3];
            GetTriangle(triId, posTextureSize, posTexelSize, triPoints);

            vec3 rayOrigin = worldPosition + worldNormal * 0.0001f;
            vec3 rayDirection = rand3(worldPosition * (iRay + 100));
            rayDirection = rayDirection * 2 - 1;
            rayDirection = normalize(rayDirection);
            if (dot(rayDirection, worldNormal) < 0)
            {
                rayDirection *= -1;
            }

            if (IntersectRayTriangle(rayOrigin, rayDirection,
                                     triPoints[0], triPoints[1], triPoints[2],
                                     0.01))
            {
                ++intersectedRays;
                break;
            }
        }
    }

    float ambientOcclusion = 1.0f - (intersectedRays / totalRays);
    OutColor = vec4(vec3(ambientOcclusion), 1);
}


