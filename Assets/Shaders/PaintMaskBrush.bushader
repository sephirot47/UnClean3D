#properties
#cull_face none

#vertex

uniform mat4 SceneModelMatrix;
uniform mat4 SceneNormalMatrix;
uniform mat4 SceneProjectionViewMatrix;

layout(location = 0) in vec3 vinTexturePosition;
layout(location = 1) in vec3 vinPosition;
layout(location = 2) in vec3 vinNormal;

out vec3 inWorldPosition;
out vec3 inWorldNormal;

void main()
{
    inWorldPosition = (SceneModelMatrix * vec4(vinPosition, 1)).xyz;
    inWorldNormal = (SceneNormalMatrix * vec4(vinNormal, 0)).xyz;
    gl_Position = vec4(vinTexturePosition, 1);
}

// ===============================================================

#fragment
#define BANG_FRAGMENT
#include "MaskBrush.glsl"

uniform sampler2D SceneDepth;
uniform mat4 SceneModelMatrix;
uniform mat4 SceneNormalMatrix;
uniform mat4 SceneProjectionViewMatrix;
uniform vec3 CameraWorldPos;
uniform vec2 ViewportSize;
uniform bool MaskBrushErasing;
uniform bool MaskBrushDepthAware;

in vec3 inWorldPosition;
in vec3 inWorldNormal;

layout(location = 0) out vec4 OutColor;

void main()
{
    vec2 uv = B_GetViewportUv();
    vec3 worldPos    = inWorldPosition;
    vec3 worldNormal = inWorldNormal;

    vec4 projectedPos = (SceneProjectionViewMatrix * vec4(inWorldPosition, 1));
    projectedPos.xyz /= projectedPos.w;
    projectedPos.xyz = projectedPos.xyz * 0.5 + 0.5;

    float maskApportation =
        GetMaskBrushApportationFromCurrentMousePositionProj(projectedPos.xy,
                                                            ViewportSize);
    if (MaskBrushDepthAware && maskApportation > 0)
    {
        vec3 normal = inWorldNormal;
        vec3 pixelDir = CameraWorldPos - worldPos.xyz;
        float dotProd = dot(pixelDir, normal);
        if (dotProd <= 0.0)
        {
            maskApportation = 0;
        }
        else
        {
            float pixelDepthFromSceneCamera = projectedPos.z;
            float pixelClosestDepthFromSceneCamera =
                        texture(SceneDepth, projectedPos.xy).r;

            float depthDiff = abs(pixelDepthFromSceneCamera -
                                  pixelClosestDepthFromSceneCamera);
            float depthThresh = 0.00001;
            if (depthDiff > depthThresh)
            {
                maskApportation = 0;
            }
        }
    }

    OutColor = vec4(maskApportation, 0, 0, 0);
}



