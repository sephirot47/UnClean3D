#vertex
#include "ScreenPass.vert"

// ===============================================================

#fragment
#define BANG_FRAGMENT
#include "Common.glsl"

uniform float Smoothness;
uniform sampler2D HeightfieldTexture;

in vec2 B_FIn_AlbedoUv;

layout(location = 0) out vec4 OutNormalTextureColor;

void main()
{
    vec2 uv = B_FIn_AlbedoUv;
    vec2 step = 0.1f * Smoothness * B_GetViewportStep();

    float heightIntensity = 15.0f;

    float tl = (texture(HeightfieldTexture, uv + vec2(-1, -1) * step).r);
    float l  = (texture(HeightfieldTexture, uv + vec2(-1, +0) * step).r);
    float bl = (texture(HeightfieldTexture, uv + vec2(-1, +1) * step).r);
    float b  = (texture(HeightfieldTexture, uv + vec2(+0, +1) * step).r);
    float br = (texture(HeightfieldTexture, uv + vec2(+1, +1) * step).r);
    float r  = (texture(HeightfieldTexture, uv + vec2(+1, +0) * step).r);
    float tr = (texture(HeightfieldTexture, uv + vec2(+1, -1) * step).r);
    float t  = (texture(HeightfieldTexture, uv + vec2(+0, -1) * step).r);

    float dX = tr + 2 * r + br - tl - 2 * l - bl;
    float dY = bl + 2 * b + br - tl - 2 * t - tr;

    vec3 rightVector = (vec3(1, 0, dX));
    vec3 upVector = (vec3(0, 1, dY));
    vec3 normal = normalize( vec3(dX, dY, 1.0f / heightIntensity) );

    vec3 normalForTexture = normal * 0.5 + 0.5;
    OutNormalTextureColor = vec4(normalForTexture, 1);
}


