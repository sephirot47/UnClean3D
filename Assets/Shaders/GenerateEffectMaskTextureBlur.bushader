#vertex

uniform mat4 SceneModelMatrix;

layout(location = 0) in vec3 vinTexturePosition;
layout(location = 1) in vec3 vinPosition;
layout(location = 3) in vec2 vinUvs;

out vec3 inWorldPosition;
out vec2 inUv;
flat out int inTriId;

void main()
{
    inWorldPosition = (SceneModelMatrix * vec4(vinPosition, 1)).xyz;
    inUv = vinTexturePosition.xy * 0.5 + 0.5;
    inTriId = gl_VertexID / 3;
    gl_Position = vec4(vinTexturePosition, 1);
}

// ===============================================================

#fragment
#define BANG_FRAGMENT

#include "ArrayOfArrays.glsl"
#include "RayCast.glsl"

ARRAY_OF_ARRAYS(TriangleUvs)
ARRAY_OF_ARRAYS(TriangleNeighborhoods)

vec3[3] GetTrianglePoints(int triId)
{
    vec3 triPoints[3];
    for (int vi = 0; vi < 3; ++vi)
    {
        triPoints[vi] = GetTrianglePositionsElement(triId, vi).xyz;
    }
    return triPoints;
}

uniform sampler2D TextureToBlur;
uniform float BlurRadius;
uniform float BlurStep;

in vec3 inWorldPosition;
in vec2 inUv;
flat in int inTriId;

layout(location = 0) out vec4 OutColor;

void main()
{
    vec3 thisWorldPosition = inWorldPosition;
    int thisTriId = inTriId;
    vec2 thisUv = inUv;

    vec3[3] thisTriWorldPosition = GetTrianglePoints(thisTriId);
    vec3 thisTriXVector = normalize(thisTriWorldPosition[1] - thisTriWorldPosition[0]);
    vec3 thisTriNormal = normalize(
                cross(thisTriXVector, thisTriWorldPosition[2] - thisTriWorldPosition[0]));
    vec3 thisTriYVector = normalize(cross(thisTriXVector, thisTriNormal));

    vec3[3] thisTriEdgesNorm;
    for (int j = 0; j < 3; ++j)
    {
        vec3 thisTriEdge = (thisTriWorldPosition[(j+1) % 3] -
                            thisTriWorldPosition[j]);
        thisTriEdgesNorm[j] = normalize(thisTriEdge);
    }

    vec4 accumulatedColor = vec4(0);
    float totalWeight = 0.0f;
    int numNeighbors = GetTriangleNeighborhoodsArraySize(thisTriId);
    float BR = BlurRadius;
    for (float y = -BR; y <= BR; ++y)
    {
        for (float x = -BR; x <= BR; ++x)
        {
            bool insideSomeTriangle = true;
            vec2 xy = vec2(x,y);
            float offsetXYLength = length(xy);
            if (offsetXYLength > BlurRadius)
            {
                continue;
            }

            vec2 sampleXYOffset = xy * BlurStep;
            vec3 sampleWorldOffset = (thisTriXVector * sampleXYOffset.x) +
                                     (thisTriYVector * sampleXYOffset.y);
            vec3 sampleWorldPosition = thisWorldPosition + sampleWorldOffset;
            float sampleWorldOffsetLength = length(sampleWorldOffset);

            for (int i = 0; i < (numNeighbors + 1); ++i) // Neighbors or this triId
            {
                int neighborTriId = (i == 0 ? thisTriId :
                    int(GetTriangleNeighborhoodsElement(thisTriId, i-1).x));
                vec3[3] nTriWorldPosition = GetTrianglePoints(neighborTriId);

                bool isInsideNeighborTriangleAfterProjected = false;
                if (neighborTriId != thisTriId)
                {
                    vec3 nTriEdge01 = (nTriWorldPosition[1] - nTriWorldPosition[0]);
                    vec3 nTriEdge02 = (nTriWorldPosition[2] - nTriWorldPosition[0]);
                    vec3 nTriNormal = normalize(cross(nTriEdge01, nTriEdge02));

                    // Modify sample world position so that it follows the surface
                    vec3 triNormalsMean = normalize(thisTriNormal + nTriNormal);
                    vec3 sampleWorldOffsetDir = (sampleWorldOffset / sampleWorldOffsetLength);
                    for (int j = 0; j < 3; ++j)
                    {
                        vec3 thisTriEdgeNorm = thisTriEdgesNorm[j];
                        vec3 thisTriEdgePlaneNormal = normalize(
                                    cross(thisTriEdgeNorm, triNormalsMean));

                        float distToEdgePlane =
                            IntersectRayPlaneDist(thisWorldPosition, sampleWorldOffsetDir,
                                                  thisTriWorldPosition[j], thisTriEdgePlaneNormal);
                        const float INF = 1e9f;
                        if (distToEdgePlane < INF)
                        {
                            vec3 projectionRayDir = -triNormalsMean;
                            float projectionDist =
                                IntersectRayPlaneDist(sampleWorldPosition,
                                                      projectionRayDir,
                                                      nTriWorldPosition[0],
                                                      nTriNormal);

                            const float Epsilon = 1e-6f;
                            isInsideNeighborTriangleAfterProjected = (projectionDist >= -Epsilon);
                            if (isInsideNeighborTriangleAfterProjected)
                            {
                                vec3 projectedSampleWorldPositionInNeighborTriPlane =
                                        sampleWorldPosition + projectionRayDir * projectionDist;
                                sampleWorldPosition = projectedSampleWorldPositionInNeighborTriPlane;

                                isInsideNeighborTriangleAfterProjected =
                                    PointInTriangle(sampleWorldPosition,
                                                    nTriWorldPosition);

                                if (false && isInsideNeighborTriangleAfterProjected)
                                {
                                    isInsideNeighborTriangleAfterProjected =
                                            (distance(thisWorldPosition, sampleWorldPosition) <
                                             sampleWorldOffsetLength);
                                    if (isInsideNeighborTriangleAfterProjected)
                                    {
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    isInsideNeighborTriangleAfterProjected = true;
                }

                if (isInsideNeighborTriangleAfterProjected)
                {
                    vec2[3] nTriUvs;
                    for (int j = 0; j < 3; ++j)
                    {
                        nTriUvs[j] = GetTriangleUvsElement(neighborTriId, j).xy;
                    }

                    vec3 sampleBarycentricCoordsInNTri =
                       GetBarycentricCoordinates(sampleWorldPosition,
                                                 nTriWorldPosition);
                    vec2 sampleUvsInNTri =
                         sampleBarycentricCoordsInNTri[0] * nTriUvs[0] +
                         sampleBarycentricCoordsInNTri[1] * nTriUvs[1] +
                         sampleBarycentricCoordsInNTri[2] * nTriUvs[2];
                    sampleUvsInNTri.y = 1.0 - sampleUvsInNTri.y;

                    vec4 sampleColor = texture(TextureToBlur, sampleUvsInNTri);
                    float weight = exp(-sampleWorldOffsetLength * 1.0);
                    totalWeight += weight;
                    accumulatedColor += weight * sampleColor;
                    // break; // This break makes it much faster, but fail in some cases...
                }
            }
        }
    }

    vec4 meanColor = accumulatedColor;
    if (totalWeight > 0.0f)
    {
        meanColor /= totalWeight;
    }
    OutColor = meanColor;
}


