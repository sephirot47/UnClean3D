#vertex

uniform mat4 SceneModelMatrix;

layout(location = 0) in vec3 vinTexturePosition;
layout(location = 1) in vec3 vinPosition;
layout(location = 3) in vec2 vinUvs;

out vec3 inWorldPosition;
out vec2 inUv;
flat out int inTriId;

void main()
{
    inWorldPosition = (SceneModelMatrix * vec4(vinPosition, 1)).xyz;
    inUv = vinTexturePosition.xy * 0.5 + 0.5;
    inTriId = gl_VertexID / 3;
    gl_Position = vec4(vinTexturePosition, 1);
}

// ===============================================================

#fragment
#define BANG_FRAGMENT

#include "ArrayOfArrays.glsl"

ARRAY_OF_ARRAYS(TriangleUvs)
ARRAY_OF_ARRAYS(TrianglePositions)
ARRAY_OF_ARRAYS(OneRingNeighborhoods)

uniform sampler2D TextureToBlur;

vec3[3] GetTrianglePoints(int triId)
{
    vec3 triPoints[3];
    for (int vi = 0; vi < 3; ++vi)
    {
        triPoints[vi] = GetTrianglePositionsElement(triId, vi).xyz;
    }
    return triPoints;
}

in vec3 inWorldPosition;
in vec2 inUv;
flat in int inTriId;

layout(location = 0) out vec4 OutColor;

void main()
{
    vec3 worldPosition = inWorldPosition;

    int thisTriId = inTriId;
    vec2 thisUv = inUv;

    vec2 texelSize = (1.0f / textureSize(TextureToBlur, 0).xy);

    int BlurRadius = 6;
    vec4 accumulatedColor = vec4(0);
    for (int y = -BlurRadius; y <= BlurRadius; ++y)
    {
        for (int x = -BlurRadius; x <= BlurRadius; ++x)
        {
            vec2 texelOffset = vec2(x, y) * texelSize;
            accumulatedColor += texture(TextureToBlur, thisUv + texelOffset);
        }
    }

    float kernelSize = (BlurRadius * 2 + 1);
    vec4 meanColor = (accumulatedColor / (kernelSize * kernelSize));
    meanColor.a = 1.0f;

    /*
    int numNeighbors = GetOneRingNeighborhoodsArraySize(thisTriId);
    for (int i = 0; i < numNeighbors; ++i)
    {
        int neighborTriId = int(GetOneRingNeighborhoodsElement(thisTriId, i).x);
        vec3 neighborTriPoints[3] = GetTrianglePoints(neighborTriId);
    }

    vec2 otherTriUvs = GetTriangleUvsElement(4, 1).xy;
    OutColor = vec4(vec3(worldPosition), 1);
    OutColor = vec4(inUv, 0, 1);
    // OutColor = vec4(vec3(float(numNeighbors)/15.0f), 1);
    */

    OutColor = meanColor;
}


