#vertex

uniform mat4 SceneModelMatrix;

layout(location = 0) in vec3 vinTexturePosition;
layout(location = 1) in vec3 vinPosition;

out vec3 inWorldPosition;
out vec2 inUv;

void main()
{
    inWorldPosition = (SceneModelMatrix * vec4(vinPosition, 1)).xyz;
    inUv = vinTexturePosition.xy * 0.5 + 0.5;
    gl_Position = vec4(vinTexturePosition, 1);
}

// ===============================================================

#fragment
#define BANG_FRAGMENT
#include "Noises.glsl"
#include "Math.glsl"

uniform float Seed;
uniform float Intensity;
uniform float Fade;
uniform float Size;
uniform float Width;

in vec3 inWorldPosition;
in vec2 inUv;

vec2 CellSize = vec2(Size * 0.001);

layout(location = 0) out vec4 OutColor;

vec2 GetClosestPoint(vec2 inPoint)
{
    vec2 cellPos = floor(inPoint / CellSize) * CellSize;
    vec2 r = rand2(cellPos + vec2(Seed));
    vec2 point = cellPos + r * CellSize;
    return point;
}

void main()
{
    vec2 firstClosestPoint = vec2(0);
    float firstClosestDist = 99.9f;
    vec2 secondClosestPoint = vec2(0);
    float secondClosestDist = 99.9f;
    for (int i = -1; i <= 1; ++i)
    {
        for (int j = -1; j <= 1; ++j)
        {
            vec2 ij = vec2(i, j);
            vec2 ijPoint = GetClosestPoint(inUv + ij * CellSize);
            float ijDist = distance(inUv, ijPoint);
            if (ijDist < firstClosestDist)
            {
                secondClosestPoint = firstClosestPoint;
                secondClosestDist = firstClosestDist;
                firstClosestPoint = ijPoint;
                firstClosestDist = ijDist;
            }
            else if (ijDist < secondClosestDist)
            {
                secondClosestPoint = ijPoint;
                secondClosestDist = ijDist;
            }
        }
    }

    vec2 midPoint = (firstClosestPoint + secondClosestPoint) * 0.5f;
    vec2 lineDir = vec2(firstClosestPoint - secondClosestPoint);
    vec2 perpLineDir = vec2(-lineDir.y, lineDir.x);
    float MinDistThresh = 0.02 * Width * 0.01;
    float MaxDistThresh = MinDistThresh * Fade;
    float distToLine = DistToLineWithDir(midPoint, perpLineDir, inUv);
    if (distToLine < MaxDistThresh)
    {
        distToLine = ((MaxDistThresh - distToLine) / (MaxDistThresh - MinDistThresh));
        distToLine = clamp(distToLine, 0, 1) * Intensity;
        OutColor = vec4(vec3(distToLine), 1);
    }
    else { OutColor = vec4(0); }
}


