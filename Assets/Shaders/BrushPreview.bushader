#properties
#cull_face back
#wireframe false
#render_pass scene_opaque

#vertex
#define BANG_VERTEX
#include "Common.glsl"

layout(location = 0) in vec3 B_VIn_Position;
layout(location = 2) in vec2 B_VIn_Uv;

out vec2 B_FIn_AlbedoUv;

void main()
{
    B_FIn_AlbedoUv = B_VIn_Uv;
    B_FIn_AlbedoUv.y = 1.0 - B_FIn_AlbedoUv.y;
    gl_Position = B_PVM * vec4(B_VIn_Position, 1);
}

// ===============================================================

#fragment
#define BANG_FRAGMENT
#include "Common.glsl"

uniform sampler2D MaskBrushTexture;
in vec2 B_FIn_AlbedoUv;

layout(location = 0) out vec4 B_GIn_Color;

void main()
{
    const float AlphaThreshold = 0.0;
    vec2 texelSize = (1.0f / textureSize(MaskBrushTexture, 0).xy);
    vec2 thisUv = B_FIn_AlbedoUv;
    vec4 thisMaskBrushTexColor = texture(MaskBrushTexture, thisUv, 0);

    B_GIn_Color = vec4(thisMaskBrushTexColor.a, 0, 0, thisMaskBrushTexColor.a * 0.75f);
    return;

    /*
    if (thisMaskBrushTexColor.a > 0.0f)
    {
        for (int i = -1; i <= 1; ++i)
        {
            for (int j = -1; j <= 1; ++j)
            {
                vec2 neighborUv = thisUv + vec2(i,j) * texelSize;
                vec4 neighborMaskBrushTexColor = texture(MaskBrushTexture, neighborUv, 0);
                if (neighborMaskBrushTexColor.a == 0.0f)
                {
                    B_GIn_Color = vec4(1, 0, 0, 1);
                    return;
                }
            }
        }
    }
    discard;
    */
}


